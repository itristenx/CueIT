generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                                                String            @id @default(uuid())
  name                                              String?
  email                                             String            @unique
  passwordHash                                      String?
  disabled                                          Boolean           @default(false)
  isDefault                                         Boolean           @default(false)
  lastLogin                                         DateTime?
  createdAt                                         DateTime          @default(now())
  updatedAt                                         DateTime          @updatedAt
  twoFactorEnabled                                  Boolean           @default(false)
  twoFactorSecret                                   String?
  twoFactorBackupCodes                              Json?
  twoFactorVerified                                 Boolean           @default(false)
  samlNameId                                        String?           @unique
  samlSessionIndex                                  String?
  department                                        String?
  lastSamlLogin                                     DateTime?
  feedback                                          Feedback[]
  logs                                              Log[]
  passkeys                                          Passkey[]
  support_tickets_support_tickets_assigneeIdTousers support_tickets[] @relation("support_tickets_assigneeIdTousers")
  support_tickets_support_tickets_userIdTousers     support_tickets[] @relation("support_tickets_userIdTousers")
  roles                                             UserRole[]

  @@map("users")
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  permissions RolePermission[]
  users       UserRole[]

  @@map("roles")
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  roles       RolePermission[]

  @@map("permissions")
}

model UserRole {
  userId     String
  roleId     Int
  assignedAt DateTime @default(now())
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  roleId       Int
  permissionId Int
  assignedAt   DateTime   @default(now())
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model Passkey {
  id           Int       @id @default(autoincrement())
  userId       String
  credentialId String    @unique
  publicKey    String
  counter      Int       @default(0)
  transports   String?
  deviceType   String?
  backedUp     Boolean   @default(false)
  createdAt    DateTime  @default(now())
  lastUsed     DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("passkeys")
}

model Log {
  id           Int      @id @default(autoincrement())
  ticketId     String?
  name         String?
  email        String?
  title        String?
  system       String?
  urgency      String?
  timestamp    DateTime @default(now())
  emailStatus  String?
  servicenowId String?
  userId       String?
  user         User?    @relation(fields: [userId], references: [id])

  @@map("logs")
}

model Config {
  key       String   @id
  value     String?
  updatedAt DateTime @default(now()) @updatedAt

  @@map("config")
}

model Kiosk {
  id             String            @id
  lastSeen       DateTime?
  version        String?
  active         Boolean           @default(false)
  logoUrl        String?
  bgUrl          String?
  statusEnabled  Boolean           @default(false)
  currentStatus  String?
  openMsg        String?
  closedMsg      String?
  errorMsg       String?
  meetingMsg     String?
  brbMsg         String?
  lunchMsg       String?
  unavailableMsg String?
  schedule       Json?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  activations    KioskActivation[]

  @@map("kiosks")
}

model Feedback {
  id        Int      @id @default(autoincrement())
  name      String?
  message   String?
  timestamp DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])

  @@map("feedback")
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  level     String   @default("info")
  active    Boolean  @default(true)
  type      String   @default("system")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

model DirectoryIntegration {
  id        Int      @id @default(autoincrement())
  provider  String
  settings  Json?
  enabled   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("directory_integrations")
}

model Asset {
  id         Int      @id @default(autoincrement())
  name       String
  type       String
  filename   String
  url        String
  sizeBytes  Int?
  mimeType   String?
  uploadedAt DateTime @default(now())

  @@map("assets")
}

model KioskActivation {
  id        String    @id
  code      String
  qrCode    String
  expiresAt DateTime
  used      Boolean   @default(false)
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  kioskId   String?
  kiosk     Kiosk?    @relation(fields: [kioskId], references: [id])

  @@map("kiosk_activations")
}

model SsoConfiguration {
  id            Int      @id @default(autoincrement())
  provider      String
  enabled       Boolean  @default(false)
  configuration Json?
  updatedAt     DateTime @default(now()) @updatedAt

  @@map("sso_configurations")
}

model AdminPin {
  id        Int      @id @default(autoincrement())
  globalPin String?
  kioskPins Json?
  updatedAt DateTime @default(now()) @updatedAt

  @@map("admin_pins")
}

model knowledge_base_articles {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model support_tickets {
  id                                      Int      @id @default(autoincrement())
  title                                   String
  description                             String
  status                                  String   @default("open")
  createdAt                               DateTime @default(now())
  updatedAt                               DateTime @default(now())
  userId                                  String?
  assigneeId                              String?
  users_support_tickets_assigneeIdTousers User?    @relation("support_tickets_assigneeIdTousers", fields: [assigneeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_support_tickets_userIdTousers     User?    @relation("support_tickets_userIdTousers", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
