// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User management and authentication
model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  passwordHash  String?
  disabled      Boolean   @default(false)
  isDefault     Boolean   @default(false)
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  roles         UserRole[]
  passkeys      Passkey[]
  logs          Log[]
  feedback      Feedback[]

  @@map("users")
}

// Role-based access control
model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())

  // Relations
  users       UserRole[]
  permissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())

  // Relations
  roles       RolePermission[]

  @@map("permissions")
}

model UserRole {
  userId     String
  roleId     Int
  assignedAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  roleId       Int
  permissionId Int
  assignedAt   DateTime @default(now())

  // Relations
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

// WebAuthn passkeys
model Passkey {
  id           Int      @id @default(autoincrement())
  userId       String
  credentialId String   @unique
  publicKey    String
  counter      Int      @default(0)
  transports   String?
  deviceType   String?
  backedUp     Boolean  @default(false)
  createdAt    DateTime @default(now())
  lastUsed     DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("passkeys")
}

// System logs and tickets
model Log {
  id            Int      @id @default(autoincrement())
  ticketId      String?
  name          String?
  email         String?
  title         String?
  system        String?
  urgency       String?
  timestamp     DateTime @default(now())
  emailStatus   String?
  servicenowId  String?
  userId        String?

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@map("logs")
}

// System configuration
model Config {
  key       String   @id
  value     String?
  updatedAt DateTime @default(now()) @updatedAt

  @@map("config")
}

// Kiosk management
model Kiosk {
  id                String    @id
  lastSeen          DateTime?
  version           String?
  active            Boolean   @default(false)
  logoUrl           String?
  bgUrl             String?
  statusEnabled     Boolean   @default(false)
  currentStatus     String?
  openMsg           String?
  closedMsg         String?
  errorMsg          String?
  meetingMsg        String?
  brbMsg            String?
  lunchMsg          String?
  unavailableMsg    String?
  schedule          Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  activations KioskActivation[]

  @@map("kiosks")
}

// User feedback
model Feedback {
  id        Int      @id @default(autoincrement())
  name      String?
  message   String?
  timestamp DateTime @default(now())
  userId    String?

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@map("feedback")
}

// System notifications
model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  level     String   @default("info")
  active    Boolean  @default(true)
  type      String   @default("system")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

// Directory integrations (LDAP, SCIM, etc.)
model DirectoryIntegration {
  id        Int      @id @default(autoincrement())
  provider  String
  settings  Json?
  enabled   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("directory_integrations")
}

// File assets
model Asset {
  id           Int      @id @default(autoincrement())
  name         String
  type         String
  filename     String
  url          String
  sizeBytes    Int?
  mimeType     String?
  uploadedAt   DateTime @default(now())

  @@map("assets")
}

// Kiosk activation codes
model KioskActivation {
  id        String    @id
  code      String
  qrCode    String
  expiresAt DateTime
  used      Boolean   @default(false)
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  kioskId   String?

  // Relations
  kiosk Kiosk? @relation(fields: [kioskId], references: [id])

  @@map("kiosk_activations")
}

// SSO configurations
model SsoConfiguration {
  id            Int      @id @default(autoincrement())
  provider      String
  enabled       Boolean  @default(false)
  configuration Json?
  updatedAt     DateTime @default(now()) @updatedAt

  @@map("sso_configurations")
}

// Admin PINs
model AdminPin {
  id        Int      @id @default(1)
  globalPin String?
  kioskPins Json?
  updatedAt DateTime @default(now()) @updatedAt

  @@map("admin_pins")
}
