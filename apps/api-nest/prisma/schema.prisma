// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core User Management
model User {
  id                String             @id @default(cuid())
  clerkId           String             @unique
  email             String             @unique
  firstName         String
  lastName          String
  displayName       String?
  profileImageUrl   String?
  department        String?
  title             String?
  phone             String?
  location          String?
  timezone          String?
  language          String             @default("en")
  status            UserStatus         @default(ACTIVE)
  isAdmin           Boolean            @default(false)
  permissions       Json?              // RBAC permissions
  metadata          Json?              // Additional user data
  lastLoginAt       DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  // Relationships
  createdTickets    Ticket[]           @relation("TicketCreator")
  assignedTickets   Ticket[]           @relation("TicketAssignee")
  ticketComments    Comment[]
  kbArticles        KBArticle[]
  userGroups        UserGroup[]
  notifications     Notification[]
  auditLogs         AuditLog[]
  workflowStates    WorkflowState[]
  catalogItems      RequestCatalogItem[] @relation("CatalogItemCreator")

  @@map("users")
}

model UserGroup {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions Json?    // Group-level permissions
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  users       User[]

  @@map("user_groups")
}

// Ticket Management
model Ticket {
  id                String           @id @default(cuid())
  ticketNumber      String           @unique
  title             String
  description       String
  priority          TicketPriority   @default(MEDIUM)
  status            TicketStatus     @default(OPEN)
  category          String?
  subcategory       String?
  tags              String[]
  metadata          Json?            // Custom fields
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  resolvedAt        DateTime?
  closedAt          DateTime?
  dueDate           DateTime?
  
  // Relationships
  creatorId         String
  creator           User             @relation("TicketCreator", fields: [creatorId], references: [id])
  assigneeId        String?
  assignee          User?            @relation("TicketAssignee", fields: [assigneeId], references: [id])
  
  // Request catalog relationship
  catalogItemId     String?
  catalogItem       RequestCatalogItem? @relation("CatalogItemRequests", fields: [catalogItemId], references: [id])
  
  comments          Comment[]
  attachments       Attachment[]
  workflowStates    WorkflowState[]
  timeEntries       TimeEntry[]
  notifications     Notification[]
  auditLogs         AuditLog[]

  @@map("tickets")
}

model Comment {
  id         String      @id @default(cuid())
  content    String
  isInternal Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Relationships
  ticketId   String
  ticket     Ticket      @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  authorId   String
  author     User        @relation(fields: [authorId], references: [id])
  
  attachments Attachment[]

  @@map("comments")
}

model Attachment {
  id          String    @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  url         String
  createdAt   DateTime  @default(now())

  // Relationships
  ticketId    String?
  ticket      Ticket?   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  commentId   String?
  comment     Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  kbArticleId String?
  kbArticle   KBArticle? @relation(fields: [kbArticleId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

// Knowledge Base
model KBArticle {
  id          String        @id @default(cuid())
  title       String
  content     String
  excerpt     String?
  category    String?
  tags        String[]
  status      ArticleStatus @default(DRAFT)
  views       Int           @default(0)
  helpful     Int           @default(0)
  notHelpful  Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  publishedAt DateTime?

  // Relationships
  authorId    String
  author      User          @relation(fields: [authorId], references: [id])
  attachments Attachment[]

  @@map("kb_articles")
}

// Workflow Management
model WorkflowState {
  id         String   @id @default(cuid())
  state      String
  timestamp  DateTime @default(now())
  metadata   Json?

  // Relationships
  ticketId   String
  ticket     Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id])

  @@map("workflow_states")
}

// Time Tracking
model TimeEntry {
  id          String   @id @default(cuid())
  description String?
  hours       Float
  date        DateTime @default(now())
  createdAt   DateTime @default(now())

  // Relationships
  ticketId    String
  ticket      Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("time_entries")
}

// Notifications
model Notification {
  id        String             @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  read      Boolean            @default(false)
  createdAt DateTime           @default(now())

  // Relationships
  userId    String
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  ticketId  String?
  ticket    Ticket?            @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Audit Logging
model AuditLog {
  id        String   @id @default(cuid())
  action    String
  entity    String
  entityId  String
  oldValues Json?
  newValues Json?
  timestamp DateTime @default(now())

  // Relationships
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  ticketId  String?
  ticket    Ticket?  @relation(fields: [ticketId], references: [id])

  @@map("audit_logs")
}

// Configuration
model Configuration {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   @default("string")
  category  String   @default("general")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("configurations")
}

// Integration Settings
model Integration {
  id        String   @id @default(cuid())
  type      String   // slack, email, helpscout, etc.
  name      String
  config    Json     // Integration-specific configuration
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("integrations")
}

// Kiosk Management
model Kiosk {
  id          String   @id @default(cuid())
  name        String
  location    String?
  logoUrl     String?
  bgUrl       String?
  active      Boolean  @default(true)
  status      String   @default("open")
  lastSeen    DateTime?
  config      Json?    // Kiosk-specific configuration
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  activations KioskActivation[]

  @@map("kiosks")
}

model KioskActivation {
  id        String   @id @default(cuid())
  code      String   @unique
  qrCode    String
  expiresAt DateTime
  used      Boolean  @default(false)
  usedAt    DateTime?
  createdAt DateTime @default(now())

  // Relationships
  kioskId   String?
  kiosk     Kiosk?   @relation(fields: [kioskId], references: [id], onDelete: Cascade)

  @@map("kiosk_activations")
}

// Assets Management
model Asset {
  id           String   @id @default(cuid())
  name         String
  type         String
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  metadata     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("assets")
}

// Feedback
model Feedback {
  id        String   @id @default(cuid())
  type      String   // bug, feature, general
  title     String
  content   String
  rating    Int?     // 1-5 scale
  status    String   @default("pending")
  email     String?
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("feedback")
}

// Security Settings
model SecuritySetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  encrypted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("security_settings")
}

// Server Information
model ServerInfo {
  id           String   @id @default(cuid())
  version      String
  environment  String
  maintenance  Boolean  @default(false)
  announcement String?
  metadata     Json?
  updatedAt    DateTime @updatedAt

  @@map("server_info")
}

// Request Catalog Management
model RequestCatalogItem {
  id               String                    @id @default(cuid())
  name             String
  description      String
  category         RequestCatalogCategory
  formFields       Json                      // Array of form field definitions
  icon             String?
  isActive         Boolean                   @default(true)
  tags             String[]
  approvalRequired Json?                     // Approval workflow configuration
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  
  // Relationships
  createdBy        String
  creator          User                      @relation("CatalogItemCreator", fields: [createdBy], references: [id])
  requests         Ticket[]                  @relation("CatalogItemRequests")

  @@map("request_catalog_items")
}

enum RequestCatalogCategory {
  IT
  HR
  FACILITIES
  OPERATIONS
  FINANCE
  OTHER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_FOR_CUSTOMER
  RESOLVED
  CLOSED
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum NotificationType {
  TICKET_CREATED
  TICKET_UPDATED
  TICKET_ASSIGNED
  TICKET_RESOLVED
  COMMENT_ADDED
  SYSTEM_ALERT
}
